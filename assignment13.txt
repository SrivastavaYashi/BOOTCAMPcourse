                              Assignment - 13  
                                                
1. Write a recursive function to calculate sum of first N natural numbers
#include<stdio.h>
int natural_sum(int x);
int main()
{
  int n,x;
  printf("enter value of n=");
  scanf("%d",&n);
  x=natural_sum(n);
  printf("sum is %d",x);
}
int natural_sum(int x)
{ 
  int sum;
  if(x>0)
  sum=x+natural_sum(x-1);
  
  return sum;
}

2. Write a recursive function to calculate sum of first N odd natural numbers
#include<stdio.h>
int odd_natural_sum(int x);
int main()
{
  int n,x;
  printf("enter value of n=");
  scanf("%d",&n);
  x=odd_natural_sum(n);
  printf("sum is %d",x);
}
int odd_natural_sum(int x)
{ 
  int sum;
  if(x>0)
  sum=2*x-1+odd_natural_sum(x-1);
  return sum;
}

3. Write a recursive function to calculate sum of first N even natural numbers
#include<stdio.h>
int even_natural_sum(int x);
int main()
{
  int n,x;
  printf("enter value of n=");
  scanf("%d",&n);
  x=even_natural_sum(n);
  printf("sum is %d",x);
}
int even_natural_sum(int x)
{ 
  int sum;
  if(x>0)
  sum=2*x+even_natural_sum(x-1);
  return sum;
}

4. Write a recursive function to calculate sum of squares of first n natural numbers
#include<stdio.h>
int square_natural_sum(int x);
int main()
{
  int n,x;
  printf("enter value of n=");
  scanf("%d",&n);
  x=square_natural_sum(n);
  printf("sum is %d",x);
}
int square_natural_sum(int x)
{ 
  int sum;
  if(x>0)
  sum=x*x+square_natural_sum(x-1);
  return sum;
}

5. Write a recursive function to calculate sum of digits of a given number
#include<stdio.h>
int digit_sum(int x);
int main()
{
  int n,x;
  printf("enter value of n=");
  scanf("%d",&n);
  x=digit_sum(n);
  printf("sum is %d",x);
}
int digit_sum(int x)
{ 
  int sum;
  if(x>0)
  sum=x%10+digit_sum(x/10);
  return sum;
}

6. Write a recursive function to calculate factorial of a given number
#include<stdio.h>
int factorial(int x);
int main()
{
  int n,x;
  printf("enter value of n=");
  scanf("%d",&n);
  x=factorial(n);
  printf("factorial of %d is %d",n,x);
}
int factorial(int x)
{ 
  int fact;
  if(x==0||x==1)
  return 1;
  else
  return x*factorial(x-1);
}

7. Write a recursive function to calculate HCF of two numbers
#include<stdio.h>
int HCF(int m,int n);
int main()
{
  int num1,num2,result;
  printf("enter a two numbers=");
  scanf("%d%d",&num1,&num2);
  result=HCF(num1,num2);
  printf("hcf is %d",result);
}
int HCF(int m,int n)
{ 
  int x=0;
  if(m<n)
 {x=m;
  m=n;
  n=x;
 }
if(m%n==0)
return n;
HCF(m%n,n);
}

8. Write a recursive function to print first N terms of Fibonacci series
#include<stdio.h>
void FIB(int m);
int main()
{
  int num;
  printf("enter a number to print fibonacci series=");
  scanf("%d",&num);
  FIB(num);

}
void FIB(int m)
{ 
  if(m==0||m==1)
  return ;
  printf("%d",FIB(m-2)+FIB(m-1));
}

9. Write a program in C to count the digits of a given number using recursion.
#include<stdio.h>
int count(int n,int i);
int main()
{
    int n=4526,x,i=0;
    x=count(n,i);
    printf("%d",x);
}
int count(int n,int i)
{
if(n==0)
return i;
if(n>0)
count(n/10,++i);
}

10. Write a program in C to calculate the power of any number using recursion.
#include<stdio.h>
int power(int n,int p);
int main()
{
    int n=3,p=4,x;
    x=power(n,p);
    printf("%d",x);
}
int power(int n,int p)
{   if(p==0)
    return 1;
    return n*power(n,p-1);
}